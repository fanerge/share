# hookEvent，组件内外监听组件生命周期
##  内部监听生命周期函数
// 场景：组件跟随浏览器窗口大小，合理调整（响应窗口）
```
export default {
  mounted() {
    this.chart = echarts.init(this.$el)
    // 监听窗口发生变化，resize组件
    window.addEventListener('resize', this.$_handleResizeChart)
    // 通过hook监听组件销毁钩子函数，并取消监听事件
    this.$once('hook:beforeDestroy', () => {
      window.removeEventListener('resize', this.$_handleResizeChart)
    })
  },
  updated() {},
  created() {},
  // ... 其他生命hook
  methods: {
    $_handleResizeChart() {
      // this.chart.resize()
    }
  }
}
```
##  外部监听生命周期函数
// 场景：想在外部监听组件的生命周期函数，如（第三方组件，需要监听第三方组件数据的变化）
```
<template>
  <!--通过@hook:updated监听组件的updated生命钩子函数-->
  <!--组件的所有生命周期钩子都可以通过@hook:钩子函数名 来监听触发-->
  <custom-select @hook:updated="$_handleSelectUpdated" />
</template>
<script>
import CustomSelect from '../components/custom-select'
export default {
  components: {
    CustomSelect
  },
  methods: {
    $_handleSelectUpdated() {
      console.log('custom-select组件的updated钩子函数被触发')
    }
  }
}
</script>
```

# watch的使用
// 配置立即执行属性
immediate: true
// 深度watch
deep: true
// 场景：如何 watch 多个 condition（让联动更容易实现）
```
export default {
  data() {
    return {
      // ...
    }
  },
  conputed: {
    searchParams() {
      const condition1 = this.condition1;
      const condition2 = this.condition2;
      const condition3 = this.condition3;
      // ... 若干条件

      return {
        condition1,
        condition2,
        condition3
        // ...
      }
    }
  },
  watch: {
    searchParams: function(newVal, oldVal){
      // todo
    }
  }
}
```
// 随时监听，随时取消，了解一下$watch，
```
export default {
  data() {
    return {
      formData: {
        name: '',
        age: 0
      }
    }
  },
  created() {
    this.$_loadData()
  },
  methods: {
    // 模拟异步请求数据
    $_loadData() {
        // 先赋值
        this.formData = {
          name: '子君',
          age: 18
        }
        // 等表单数据回填之后，监听数据是否发生变化
        const unwatch = this.$watch(
          'formData',
          () => {
            console.log('数据发生了变化')
          },
          {
            deep: true
          }
        )
        // 模拟数据发生了变化
        setTimeout(() => {
          this.formData.name = '张三'
        }, 1000)
        // 取消watch
        unwatch
    }
  }
}
```








<pre><code><script type="text/template">

</script></code></pre>
